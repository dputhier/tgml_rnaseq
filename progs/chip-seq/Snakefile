"""
Authors : Denis Puthier 
Aim : Chip-Seq data analysis
Date : Wed Feb 10 12:18:28 CET 2016
Run : snakemake -s Snakefile -c 'qsub -V  -q batch -l {params.ppn}' -j 

"""

import sys
from snakemake.utils import report

BASE_DIR = ""
WDIR = BASE_DIR + ""
workdir : WDIR


INDEX = WDIR + ""
SICKLE_LEN = "20"
BOWTIE_PARAMS=" --sensitive --phred33 -q -p 10 "

SAMPLES, = glob_wildcards("samples/raw/{smp}.fq.gz")

#----------------------------------------------------#
# Function definition
#----------------------------------------------------#

def message(mes):
	sys.stderr.write(mes + "\n")

#----------------------------------------------------#
# rules
#----------------------------------------------------#

message ("The current working directory is " + WDIR)

for smp in SAMPLES:
	message("Sample" + smp + " will be processed")

rule all :
	params : ppn="nodes=1:ppn=1"
	input : expand("samples/fastqc/{smp}.fq_fastqc.zip", smp = SAMPLES),\
			expand("samples/mapping_read/{smp}_sort.bam.bai", smp = SAMPLES),\
			expand("samples/number_aligned_reads/{smp}.txt", smp = SAMPLES),\
			expand("samples/mapping_read/{smp}_q30.txt", smp = SAMPLES),\
			expand("samples/mapping_read/{smp}_final.txt", smp = SAMPLES)

rule fastqc :
	input : seq = "samples/raw/{smp}.fq.gz"
	output : seq = "samples/fastqc/{smp}.fq_fastqc.zip"
	message : "---Quality check of raw data with Fastqc"
	params : ppn="nodes=1:ppn=1"
	shell :
		"""/opt/FastQC/fastqc --outdir samples/fastqc --extract -f fastq {input.seq}"""

rule trimming :
	input : seq = "samples/raw/{smp}.fq.gz"
	output : seq = "samples/trimmed/{smp}_t.fq"
	message : "Trimming the reads"
	params : sickle_len = SICKLE_LEN, ppn="nodes=1:ppn=1"
	shell : """ sickle se -f {input.seq} -l{params.sickle_len} -q 20  -t sanger -o {output.seq}  """

rule bowtie :
	input : seq = "samples/trimmed/{smp}_t.fq"
	output : seq = "samples/mapping_read/{smp}.bam"
	message : "Alignment of reads into human chr21"
	params : index = INDEX, par=BOWTIE_PARAMS, ppn="nodes=1:ppn=1"
	shell: """bowtie2 {params.par} -x {params.index} -U {input.seq}  |samtools view -bS -> {output.seq} """

rule sort_bam :
	input : seq = "samples/mapping_read/{smp}.bam"
	output : seq = "samples/mapping_read/{smp}_sort.bam"
	message : "Sort reads before index"
	params :ppn="nodes=1:ppn=1"
	shell : """ samtools sort -f {input.seq} {output.seq} """

rule index_bam :
	input : seq = "samples/mapping_read/{smp}_sort.bam"
	output : seq = "samples/mapping_read/{smp}_sort.bam.bai"
	message : "Index bam"
	params : ppn="nodes=1:ppn=1"
	shell : """samtools index {input.seq}"""

rule number_aligned_reads :
	input : seq = "samples/mapping_read/{smp}.bam"
	output : seq = "samples/number_aligned_reads/{smp}.txt"
	params : ppn="nodes=1:ppn=1"
	message :"Analyze of number of aligned reads"
	shell : """ samtools flagstat {input.seq} > {output.seq}"""

rule read_sup_q30 :
	input : seq = "samples/mapping_read/{smp}.bam"
	output : seq = "samples/mapping_read/{smp}_q30.bam"
	params :ppn="nodes=1:ppn=1"
	message : "Save reads with a mapping quality superior to 30"
	shell : """ samtools view -bh -q 30 {input.seq} > {output.seq}"""

rule number_aligned_reads2 :
	input : seq = "samples/mapping_read/{smp}_q30.bam"
	output :seq = "samples/mapping_read/{smp}_q30.txt"
	params :ppn="nodes=1:ppn=1"
	message :"Analyze of number of aligned reads"
	shell : """ samtools flagstat {input.seq} > {output.seq}"""

rule delete_duplicate :
	input : seq = "samples/mapping_read/{smp}_q30.bam"
	output : seq ="samples/mapping_read/{smp}_final.bam"
	params :ppn="nodes=1:ppn=1"
	message :"Delete reads in duplicate"
	shell : """ samtools_0.1.19 rmdup -s  {input.seq} {output.seq}"""

rule number_aligned_reads3 :
	input : seq = "samples/mapping_read/{smp}_final.bam"
	output : seq = "samples/mapping_read/{smp}_final.txt"
	params :ppn="nodes=1:ppn=1"
	message :"Analyze of number of aligned reads"
	shell : """ samtools flagstat {input.seq} > {output.seq}"""

